{"name":"delimited","tagline":"Simple CSV I/O for Scala. Read, write, validate, and transform. Do so line-by-line, all-at-once, or via streams.","body":"* __Requirements:__ Scala 2.10+\r\n* __Documentation:__ [Scaladoc](http://rockymadden.com/delimited/scaladoc/)\r\n* __Issues:__ [Enhancements](https://github.com/rockymadden/delimited/issues?labels=accepted%2Cenhancement&page=1&state=open), [Questions](https://github.com/rockymadden/delimited/issues?labels=accepted%2Cquestion&page=1&state=open), [Bugs](https://github.com/rockymadden/delimited/issues?labels=accepted%2Cbug&page=1&state=open)\r\n* __Versioning:__ [Semantic Versioning v2.0](http://semver.org/)\r\n\r\n## Depending upon\r\nThe project is available on the [Maven Central Repository](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.rockymadden.delimited%22). Adding a dependency to the core sub-project in various build systems (add other sub-projects as needed):\r\n\r\n\r\n__Simple Build Tool:__\r\n```scala\r\nlibraryDependencies += \"com.rockymadden.delimited\" %% \"delimited-core\" % \"0.1.0\"\r\n```\r\n\r\n---\r\n\r\n__Gradle:__\r\n```groovy\r\ncompile 'com.rockymadden.delimited:delimited-core_2.10:0.1.0'\r\n```\r\n\r\n---\r\n\r\n__Maven:__\r\n```xml\r\n<dependency>\r\n\t<groupId>com.rockymadden.delimited</groupId>\r\n\t<artifactId>delimited-core_2.10</artifactId>\r\n\t<version>0.1.0</version>\r\n</dependency>\r\n```\r\n\r\n---\r\n\r\n## Reader Usage\r\nThe recommended usage of ```DelimitedReader``` is via the loan pattern, which is provided by functions in its companion object (shown below). Loaned readers have automatic resource clean up. Read functions ultimately return ```DelimitedLine```s, which is a type alias to ```IndexedSeq[String]```.\r\n\r\n---\r\n\r\n__Line-by-line:__\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { reader =>\r\n\tIterator.continually(reader.readLine()).takeWhile(_.isDefined).foreach(println)\r\n}\r\n```\r\nThe ```readLine``` function returns ```Option[DelimitedLine]```. The end of file is indicated by the return of ```None``` rather than ```Some```.\r\n\r\n---\r\n\r\n__All-at-once:__\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { reader =>\r\n\treader.readAll().foreach(_.foreach(println))\r\n}\r\n```\r\nThe ```readAll``` function returns ```Option[Seq[DelimitedLine]]```.\r\n\r\n---\r\n\r\n__Via stream:__\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { reader =>\r\n\treader.readToStream().take(2).foreach(println)\r\n}\r\n```\r\nThe ```readToStream``` function returns ```Stream[DelimitedLine]```.\r\n\r\n---\r\n\r\n__With header:__\r\n```scala\r\nDelimitedReader.usingWithHeader(\"path/to/file.csv\") { (reader, header) =>\r\n\treader.readLine() map { line =>\r\n\t\tval field0 = line(header(\"field0\")))\r\n\t\tval field1 = line(header(\"field1\")))\r\n\t}\r\n}\r\n```\r\nThe header type is ```Map[String, Int]```. It maps field values in the first line to their respective index.\r\n\r\n---\r\n\r\n## Writer Usage\r\nThe recommended usage of ```DelimitedWriter``` is via the loan pattern, which is provided by functions in its companion object (shown below). Loaned writers have automatic resource clean up.\r\n\r\n---\r\n\r\n__Line-by-line:__\r\n```scala\r\nDelimitedWriter.using(\"path/to/file.csv\") { writer =>\r\n\tval line = Some(Vector(\"field0\", \"field1\", \"field2\"))\r\n\twriter.writeLine(line)\r\n}\r\n```\r\n\r\n---\r\n\r\n__All-at-once:__\r\n```scala\r\nDelimitedWriter.using(\"path/to/file.csv\") { writer =>\r\n\tval lines = Some(Seq(\r\n\t\tVector(\"field0\", \"field1\", \"field2\"),\r\n\t\tVector(\"field0\", \"field1\", \"field2\")\r\n\t))\r\n\twriter.writeAll(lines)\r\n}\r\n```\r\n\r\n---\r\n\r\n__Via stream:__\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { => reader\r\n\tDelimitedWriter.using(\"path/to/anotherfile.csv\") { writer =>\r\n\t\tval lines = reader.readToStream()\r\n\t\twriter.writeFromStream(lines)\r\n\t}\r\n}\r\n```\r\n\r\n---\r\n\r\n## Decorating\r\nIt is possible to decorate readers and writers with additional functionality, this is provided by rich wrapping via implicits. Decorations include:\r\n\r\n* __withTransform:__ Transform line values after reading and/or before writing. A handful of pre-built transforms are located in the [transform module](https://github.com/rockymadden/delimited/blob/master/core/src/main/scala/com/rockymadden/delimited/Transform.scala).\r\n\r\n---\r\n\r\nNon-decorated usage:\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { reader =>\r\n\t// Do something with reader.\r\n}\r\n```\r\n\r\n---\r\n\r\nApply a filter so that we only get alphabetical characters in each line:\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { reader =>\r\n\tdecoratedReader = reader withTransform StringTransform.filterAlpha\r\n\r\n\t// Do something with decoratedReader.\r\n}\r\n```\r\n\r\n---\r\n\r\nMake your own:\r\n```scala\r\nDelimitedReader.using(\"path/to/file.csv\") { reader =>\r\n\tcustomTransform: StringTransform = (s) =>\r\n\t\ts.toCharArray.filter(c => c == 'A' || c == 'C' || c == 'G' || c == 'T').mkString\r\n\tdecoratedReader = reader withTransform customTransform\r\n\r\n\t// Do something with decoratedReader.\r\n}\r\n```\r\n\r\n---\r\n\r\n## Validator Usage\r\nValidators exist to ensure files pass one or more checks. A handful of pre-built checks are located in the [check module](https://github.com/rockymadden/delimited/blob/master/core/src/main/scala/com/rockymadden/delimited/Check.scala).\r\n\r\n---\r\n\r\nIn this scenario, we want to ensure the number of fields in each line is consistent and that all fields have a length:\r\n```scala\r\nval reader = DelimitedReader(\"path/to/file.csv\")\r\n\r\nDelimitedValidator(reader).validate(\r\n\tDelimitedChecks.checkFieldCountConsistent,\r\n\tDelimitedChecks.checkFieldsHaveLength\r\n)\r\n```\r\n\r\n---\r\n\r\nIn this scenario, we want to ensure all field lengths are consistent (e.g. each field has 2 characters):\r\n```scala\r\nval reader = DelimitedReader(\"path/to/file.csv\")\r\n\r\nDelimitedValidator(reader).validate(DelimitedChecks.checkFieldsLengthConsistent)\r\n```\r\n\r\n---\r\n\r\n## License\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Rocky Madden (http://rockymadden.com/)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}